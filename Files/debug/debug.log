[info]: initiazing renderer
[info]: alllocating memory to the SDL_Window context
[info]: scf configuration:
  launch::
    launch::fastmobs1          = false
    launch::fastmobs2          = false
    launch::fastmobs3          = false
    launch::ext_bff            = false
    launch::ext_scf            = false
    launch::deafmobs           = false
    launch::blindmobs          = false
    launch::nosmell            = false
    launch::nomobs             = false
    launch::godmode            = false
    launch::infinite_ammo      = false
    launch::bottomless_clip    = false
    launch::devmode            = false
  renderer::
    renderer::api              = 1
    renderer::drawfps          = true
    renderer::ticrate          = 35
    renderer::fullscreen       = false
    renderer::native_fullscreen= false
    renderer::hidden           = false
    renderer::vsync            = true
  audio::
    audio::music_vol           = 0.8
    audio::sfx_vol             = 1.1
    audio::music_on            = true
    audio::sfx_on              = true

[info]: done parsing scf file
[info]: running main gameplay loop
[trace]: [OpenGL Debug Log] Buffer detailed info: Buffer object 1 (bound to GL_ARRAY_BUFFER_ARB, usage hint is GL_STATIC_DRAW) will use VIDEO memory as the source for buffer object operations.
[trace]: [OpenGL Debug Log] Buffer detailed info: Buffer object 2 (bound to GL_ARRAY_BUFFER_ARB, usage hint is GL_STATIC_DRAW) will use VIDEO memory as the source for buffer object operations.
[info]: successfully compiled shader shader.glsl
[trace]: [OpenGL Debug Log] Buffer detailed info: Buffer object 3 (bound to GL_ARRAY_BUFFER_ARB, usage hint is GL_STATIC_DRAW) will use VIDEO memory as the source for buffer object operations.
[trace]: [OpenGL Debug Log] Buffer detailed info: Buffer object 4 (bound to GL_ELEMENT_ARRAY_BUFFER_ARB, usage hint is GL_STATIC_DRAW) will use VIDEO memory as the source for buffer object operations.
[info]: successfully compiled shader framebuffer.glsl
[info]: loading texture file sand.jpg
[error]: [OpenGL Debug Log] GL_INVALID_ENUM error generated. <pname> enum is invalid; expected GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_DEPTH_TEXTURE_MODE, GL_TEXTURE_COMPARE_MODE, etc. (19 others).
[info]: successfully loaded texture file sand.jpg
[info]: loading texture file desertbkgd.jpg
[error]: [OpenGL Debug Log] GL_INVALID_ENUM error generated. <pname> enum is invalid; expected GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_DEPTH_TEXTURE_MODE, GL_TEXTURE_COMPARE_MODE, etc. (19 others).
[info]: successfully loaded texture file desertbkgd.jpg
[warning]: Z_ScanForBlock: 0x7f844fcbf0ed (gptr) has dangling pointer into freed block 0x7f844fd0f5ce (0x7f844fcf781d -> 0x7f844fd0f5ce)
[warning]: Z_ScanForBlock: 0x7f844fcf78fb (pstructs) has dangling pointer into freed block 0x7f844fd0f5ce (0x7f844fcf78fb -> 0x7f844fd0f5ce)
[trace]: Z_MergePB: merging prev block for block at 0x7f844fd0f597
[trace]: Z_MergeFB: prev block not TAG_FREE
[trace]: Z_MergeNB: merging next block for block at 0x7f844fd0f597
[trace]: Z_MergeNB: next block not TAG_FREE
