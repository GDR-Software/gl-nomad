export memset
code
proc memset 8 0
file "../../game/bg_lib.c"
line 9
;1:#include "../engine/n_shared.h"
;2:
;3:#ifndef Q3_VM
;4:    #error Never include this in engine builds
;5:#endif
;6:
;7:
;8:void *memset(void *dst, int fill, size_t n)
;9:{
line 10
;10:    char *d = dst;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $32
JUMPV
LABELV $31
line 11
;11:    while (n--) {
line 12
;12:        *d++ = fill;
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRFP4 4
INDIRI4
CVII1 4
ASGNI1
line 13
;13:    }
LABELV $32
line 11
ADDRLP4 4
ADDRFP4 8
INDIRU4
ASGNU4
ADDRFP4 8
ADDRLP4 4
INDIRU4
CNSTU4 1
SUBU4
ASGNU4
ADDRLP4 4
INDIRU4
CNSTU4 0
NEU4 $31
line 14
;14:    return dst;
ADDRFP4 0
INDIRP4
RETP4
LABELV $30
endproc memset 8 0
export memcpy
proc memcpy 20 0
line 18
;15:}
;16:
;17:void *memcpy(void *dst, const void *src, size_t n)
;18:{
line 19
;19:    char *d = dst;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 20
;20:    const char *s = src;
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $36
JUMPV
LABELV $35
line 21
;21:    while (n--) {
line 22
;22:        *d++ = *s++;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI1
ASGNI1
line 23
;23:    }
LABELV $36
line 21
ADDRLP4 8
ADDRFP4 8
INDIRU4
ASGNU4
ADDRFP4 8
ADDRLP4 8
INDIRU4
CNSTU4 1
SUBU4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
NEU4 $35
line 24
;24:    return dst;
ADDRFP4 0
INDIRP4
RETP4
LABELV $34
endproc memcpy 20 0
export memccpy
proc memccpy 20 0
line 28
;25:}
;26:
;27:void *memccpy(void *dst, const void *src, int c, size_t n)
;28:{
line 29
;29:    char *d = dst;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 30
;30:    const char *s = src;
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $40
JUMPV
LABELV $39
line 31
;31:    while (n-- && *d != c) {
line 32
;32:        *d++ = *s++;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI1
ASGNI1
line 33
;33:    }
LABELV $40
line 31
ADDRLP4 8
ADDRFP4 12
INDIRU4
ASGNU4
ADDRFP4 12
ADDRLP4 8
INDIRU4
CNSTU4 1
SUBU4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
EQU4 $42
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRFP4 8
INDIRI4
NEI4 $39
LABELV $42
line 34
;34:    return dst;
ADDRFP4 0
INDIRP4
RETP4
LABELV $38
endproc memccpy 20 0
export memchr
proc memchr 8 0
line 38
;35:}
;36:
;37:void *memchr(void *ptr, int delegate, size_t n)
;38:{
line 39
;39:    char *p = ptr;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $45
JUMPV
LABELV $44
line 40
;40:    while (n--) {
line 41
;41:        if (*p++ == delegate) {
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
ADDRFP4 4
INDIRI4
NEI4 $47
line 42
;42:            return (void *)p;
ADDRLP4 0
INDIRP4
RETP4
ADDRGP4 $43
JUMPV
LABELV $47
line 44
;43:        }
;44:    }
LABELV $45
line 40
ADDRLP4 4
ADDRFP4 8
INDIRU4
ASGNU4
ADDRFP4 8
ADDRLP4 4
INDIRU4
CNSTU4 1
SUBU4
ASGNU4
ADDRLP4 4
INDIRU4
CNSTU4 0
NEU4 $44
line 45
;45:    return ptr;
ADDRFP4 0
INDIRP4
RETP4
LABELV $43
endproc memchr 8 0
export memmove
proc memmove 20 0
line 49
;46:}
;47:
;48:void *memmove(void *dst, const void *src, size_t n)
;49:{
line 50
;50:    char *d = dst;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 51
;51:    const char *s = src;
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
line 52
;52:    if (d > s) {
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
LEU4 $56
ADDRGP4 $53
JUMPV
LABELV $52
line 53
;53:        while (n--) {
line 54
;54:            *d-- = *s--;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 -1
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI1
ASGNI1
line 55
;55:        }
LABELV $53
line 53
ADDRLP4 8
ADDRFP4 8
INDIRU4
ASGNU4
ADDRFP4 8
ADDRLP4 8
INDIRU4
CNSTU4 1
SUBU4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
NEU4 $52
line 56
;56:    }
ADDRGP4 $51
JUMPV
line 57
;57:    else {
LABELV $55
line 58
;58:        while (n--) {
line 59
;59:            *d++ = *s++;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI1
ASGNI1
line 60
;60:        }
LABELV $56
line 58
ADDRLP4 8
ADDRFP4 8
INDIRU4
ASGNU4
ADDRFP4 8
ADDRLP4 8
INDIRU4
CNSTU4 1
SUBU4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
NEU4 $55
line 61
;61:    }
LABELV $51
line 62
;62:    return dst;
ADDRFP4 0
INDIRP4
RETP4
LABELV $49
endproc memmove 20 0
export strlen
proc strlen 4 0
line 66
;63:}
;64:
;65:size_t strlen(const char *str)
;66:{
line 69
;67:    const char* s;
;68:
;69:    s = str;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $60
JUMPV
LABELV $59
line 70
;70:    while (*s) {
line 71
;71:        s++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 72
;72:    }
LABELV $60
line 70
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $59
line 73
;73:    return (size_t)s - (size_t)str;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
SUBU4
RETU4
LABELV $58
endproc strlen 4 0
export strcat
proc strcat 20 0
line 77
;74:}
;75:
;76:char* strcat(char *dst, const char *src)
;77:{
line 78
;78:    char *d = dst;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 79
;79:    const char *s = src;
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $64
JUMPV
LABELV $63
line 80
;80:    while (*d) {
line 81
;81:        d++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 82
;82:    }
LABELV $64
line 80
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $63
ADDRGP4 $67
JUMPV
LABELV $66
line 83
;83:    while (*src) {
line 84
;84:        *d++ = *src++;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI1
ASGNI1
line 85
;85:    }
LABELV $67
line 83
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $66
line 86
;86:    *d = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 87
;87:    return dst;
ADDRFP4 0
INDIRP4
RETP4
LABELV $62
endproc strcat 20 0
export strrchr
proc strrchr 16 8
line 91
;88:}
;89:
;90:char* strrchr(const char *str, int c)
;91:{
line 94
;92:    const char *found, *p;
;93:
;94:    c = (unsigned char)c;
ADDRFP4 4
ADDRFP4 4
INDIRI4
CVIU4 4
CVUU1 4
CVUI4 1
ASGNI4
line 96
;95:
;96:    if (!c)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $70
line 97
;97:        return strchr(str, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
RETP4
ADDRGP4 $69
JUMPV
LABELV $70
line 99
;98:    
;99:    found = NULL;
ADDRLP4 4
CNSTP4 0
ASGNP4
ADDRGP4 $73
JUMPV
LABELV $72
line 100
;100:    while ((p = strchr(str, c)) != NULL) {
line 101
;101:        found = p;
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
line 102
;102:        str = p + 1;
ADDRFP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 103
;103:    }
LABELV $73
line 100
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $72
line 104
;104:    return (char *)found;
ADDRLP4 4
INDIRP4
RETP4
LABELV $69
endproc strrchr 16 8
export strchr
proc strchr 4 0
line 108
;105:}
;106:
;107:char* strchr(const char* str, int c)
;108:{
line 109
;109:    const char *s = str;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $77
JUMPV
LABELV $76
line 110
;110:    while (*s) {
line 111
;111:        if (*s == c) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRFP4 4
INDIRI4
NEI4 $79
line 112
;112:            return (char*)s;
ADDRLP4 0
INDIRP4
RETP4
ADDRGP4 $75
JUMPV
LABELV $79
line 114
;113:        }
;114:        s++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 115
;115:    }
LABELV $77
line 110
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $76
line 116
;116:    return (char*)NULL;
CNSTP4 0
RETP4
LABELV $75
endproc strchr 4 0
export strstr
proc strstr 16 0
line 120
;117:}
;118:
;119:char* strstr(const char* needle, const char* haystack)
;120:{
line 121
;121:    const char *str1 = needle;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
line 122
;122:    const char *str2 = haystack;
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $83
JUMPV
LABELV $82
line 123
;123:    while (*str1) {
line 125
;124:        int i;
;125:        for (i = 0; str2[i]; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $88
JUMPV
LABELV $85
line 126
;126:            if (str1[i] != str2[i]) {
ADDRLP4 8
INDIRI4
ADDRLP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
ADDRLP4 8
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
EQI4 $89
line 127
;127:                break;
ADDRGP4 $87
JUMPV
LABELV $89
line 129
;128:            }
;129:        }
LABELV $86
line 125
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $88
ADDRLP4 8
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $85
LABELV $87
line 130
;130:        if (!str2[i]) {
ADDRLP4 8
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $91
line 131
;131:            return (char*)str1;
ADDRLP4 4
INDIRP4
RETP4
ADDRGP4 $81
JUMPV
LABELV $91
line 133
;132:        }
;133:        str1++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 134
;134:    }
LABELV $83
line 123
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $82
line 135
;135:    return (char*)NULL;
CNSTP4 0
RETP4
LABELV $81
endproc strstr 16 0
export strcmp
proc strcmp 20 0
line 139
;136:}
;137:
;138:int strcmp(const char* s1, const char* s2)
;139:{
line 140
;140:    const char *str1 = s1;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 141
;141:    const char *str2 = s2;
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $95
JUMPV
LABELV $94
line 142
;142:    while (*str1 == *str2 && *str1 && *str2) {
line 143
;143:        str1++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 144
;144:        str2++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 145
;145:    }
LABELV $95
line 142
ADDRLP4 8
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 12
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $98
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $98
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $94
LABELV $98
line 146
;146:    return *str1 - *str2;
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
SUBI4
RETI4
LABELV $93
endproc strcmp 20 0
export strncmp
proc strncmp 24 0
line 150
;147:}
;148:
;149:int strncmp(const char* s1, const char* s2, size_t n)
;150:{
line 151
;151:    const char *str1 = s1;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 152
;152:    const char *str2 = s2;
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $101
JUMPV
LABELV $100
line 153
;153:    while (*str1 == *str2 && *str1 && *str2 && n--) {
line 154
;154:        str1++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 155
;155:        str2++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 156
;156:    }
LABELV $101
line 153
ADDRLP4 12
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 16
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $105
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $105
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $105
ADDRLP4 8
ADDRFP4 8
INDIRU4
ASGNU4
ADDRFP4 8
ADDRLP4 8
INDIRU4
CNSTU4 1
SUBU4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
NEU4 $100
LABELV $105
line 157
;157:    return *str1 - *str2;
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
SUBI4
RETI4
LABELV $99
endproc strncmp 24 0
export strncpy
proc strncpy 20 0
line 161
;158:}
;159:
;160:char* strncpy(char *dst, const char *src, size_t n)
;161:{
line 162
;162:    char *d = dst;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
line 163
;163:    const char *s = src;
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $108
JUMPV
LABELV $107
line 164
;164:    while (*s != '\0' && n--) {
line 165
;165:        *d++ = *s++;
ADDRLP4 8
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI1
ASGNI1
line 166
;166:    }
LABELV $108
line 164
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $110
ADDRLP4 8
ADDRFP4 8
INDIRU4
ASGNU4
ADDRFP4 8
ADDRLP4 8
INDIRU4
CNSTU4 1
SUBU4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
NEU4 $107
LABELV $110
line 167
;167:    *d = 0;
ADDRLP4 4
INDIRP4
CNSTI1 0
ASGNI1
line 168
;168:    return dst;
ADDRFP4 0
INDIRP4
RETP4
LABELV $106
endproc strncpy 20 0
export strcpy
proc strcpy 20 0
line 172
;169:}
;170:
;171:char* strcpy(char *dst, const char *src)
;172:{
line 173
;173:    char *d = dst;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
line 174
;174:    const char *s = src;
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $113
JUMPV
LABELV $112
line 175
;175:    while (*s != '\0') {
line 176
;176:        *d++ = *s++;
ADDRLP4 8
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI1
ASGNI1
line 177
;177:    }
LABELV $113
line 175
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $112
line 178
;178:    *d = 0;
ADDRLP4 4
INDIRP4
CNSTI1 0
ASGNI1
line 179
;179:    return dst;
ADDRFP4 0
INDIRP4
RETP4
LABELV $111
endproc strcpy 20 0
export tolower
proc tolower 4 0
line 183
;180:}
;181:
;182:int tolower(int c)
;183:{
line 184
;184:    if (c >= 'A' && c <= 'Z') {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 65
LTI4 $116
ADDRLP4 0
INDIRI4
CNSTI4 90
GTI4 $116
line 185
;185:        c += 'a' - 'A';
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 32
ADDI4
ASGNI4
line 186
;186:    }
LABELV $116
line 187
;187:    return c;
ADDRFP4 0
INDIRI4
RETI4
LABELV $115
endproc tolower 4 0
export toupper
proc toupper 4 0
line 191
;188:}
;189:
;190:int toupper(int c)
;191:{
line 192
;192:    if (c >= 'a' && c <= 'z') {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 97
LTI4 $119
ADDRLP4 0
INDIRI4
CNSTI4 122
GTI4 $119
line 193
;193:        c += 'A' - 'a';
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 -32
ADDI4
ASGNI4
line 194
;194:    }
LABELV $119
line 195
;195:    return c;
ADDRFP4 0
INDIRI4
RETI4
LABELV $118
endproc toupper 4 0
proc swapfunc 24 0
line 224
;196:}
;197:
;198:static char* med3(char*, char*, char*, cmp_t*);
;199:static void  swapfunc(char*, char*, int, int);
;200:
;201:/*
;202: * Qsort routine from Bentley & McIlroy's "Engineering a Sort Function".
;203: */
;204:#define swapcode(TYPE, parmi, parmj, n)                                        \
;205:    {                                                                          \
;206:        long           i  = (n) / sizeof(TYPE);                                \
;207:        register TYPE* pi = (TYPE*)(parmi);                                    \
;208:        register TYPE* pj = (TYPE*)(parmj);                                    \
;209:        do                                                                     \
;210:        {                                                                      \
;211:            register TYPE t = *pi;                                             \
;212:            *pi++           = *pj;                                             \
;213:            *pj++           = t;                                               \
;214:        } while (--i > 0);                                                     \
;215:    }
;216:
;217:#define SWAPINIT(a, es)                                                        \
;218:    swaptype = ((char*)a - (char*)0) % sizeof(long) || es % sizeof(long)       \
;219:                   ? 2                                                         \
;220:                   : es == sizeof(long) ? 0 : 1;
;221:
;222:static void swapfunc(a, b, n, swaptype) char *a, *b;
;223:int         n, swaptype;
;224:{
line 225
;225:    if (swaptype <= 1)
ADDRFP4 12
INDIRI4
CNSTI4 1
GTI4 $122
line 226
;226:        swapcode(long, a, b, n) else swapcode(char, a, b, n)
ADDRLP4 8
ADDRFP4 8
INDIRI4
CVIU4 4
CNSTI4 2
RSHU4
CVUI4 4
ASGNI4
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
LABELV $124
ADDRLP4 12
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 16
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
LABELV $125
ADDRLP4 12
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
GTI4 $124
ADDRGP4 $123
JUMPV
LABELV $122
ADDRLP4 8
ADDRFP4 8
INDIRI4
CVIU4 4
CVUI4 4
ASGNI4
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
LABELV $127
ADDRLP4 12
ADDRLP4 0
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 16
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 20
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 12
INDIRI1
ASGNI1
LABELV $128
ADDRLP4 12
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
GTI4 $127
LABELV $123
line 227
;227:}
LABELV $121
endproc swapfunc 24 0
proc med3 40 8
line 245
;228:
;229:#define swap(a, b)                                                             \
;230:    if (swaptype == 0)                                                         \
;231:    {                                                                          \
;232:        long t      = *(long*)(a);                                             \
;233:        *(long*)(a) = *(long*)(b);                                             \
;234:        *(long*)(b) = t;                                                       \
;235:    }                                                                          \
;236:    else                                                                       \
;237:        swapfunc(a, b, es, swaptype)
;238:
;239:#define vecswap(a, b, n)                                                       \
;240:    if ((n) > 0)                                                               \
;241:    swapfunc(a, b, n, swaptype)
;242:
;243:static char *med3(a, b, c, cmp) char *a, *b, *c;
;244:cmp_t*       cmp;
;245:{
line 246
;246:    return cmp(a, b) < 0 ? (cmp(b, c) < 0 ? b : (cmp(a, c) < 0 ? c : a))
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
GEI4 $136
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 24
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
GEI4 $138
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $139
JUMPV
LABELV $138
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 28
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
GEI4 $140
ADDRLP4 8
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 $141
JUMPV
LABELV $140
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
LABELV $141
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
LABELV $139
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
ADDRGP4 $137
JUMPV
LABELV $136
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 32
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
LEI4 $142
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $143
JUMPV
LABELV $142
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 36
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
GEI4 $144
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $145
JUMPV
LABELV $144
ADDRLP4 16
ADDRFP4 8
INDIRP4
ASGNP4
LABELV $145
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
LABELV $143
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
LABELV $137
ADDRLP4 0
INDIRP4
RETP4
LABELV $130
endproc med3 40 8
export qsort
proc qsort 104 16
line 253
;247:                         : (cmp(b, c) > 0 ? b : (cmp(a, c) < 0 ? a : c));
;248:}
;249:
;250:void   qsort(a, n, es, cmp) void* a;
;251:size_t n, es;
;252:cmp_t* cmp;
;253:{
LABELV $147
line 258
;254:    char *pa, *pb, *pc, *pd, *pl, *pm, *pn;
;255:    int   d, r, swaptype, swap_cnt;
;256:
;257:loop:
;258:    SWAPINIT(a, es);
ADDRLP4 52
CNSTU4 3
ASGNU4
ADDRLP4 56
CNSTU4 0
ASGNU4
ADDRFP4 0
INDIRP4
CVPU4 4
CVUI4 4
CVIU4 4
ADDRLP4 52
INDIRU4
BANDU4
ADDRLP4 56
INDIRU4
NEU4 $152
ADDRFP4 8
INDIRU4
ADDRLP4 52
INDIRU4
BANDU4
ADDRLP4 56
INDIRU4
EQU4 $150
LABELV $152
ADDRLP4 44
CNSTI4 2
ASGNI4
ADDRGP4 $151
JUMPV
LABELV $150
ADDRFP4 8
INDIRU4
CNSTU4 4
NEU4 $153
ADDRLP4 48
CNSTI4 0
ASGNI4
ADDRGP4 $154
JUMPV
LABELV $153
ADDRLP4 48
CNSTI4 1
ASGNI4
LABELV $154
ADDRLP4 44
ADDRLP4 48
INDIRI4
ASGNI4
LABELV $151
ADDRLP4 16
ADDRLP4 44
INDIRI4
ASGNI4
line 259
;259:    swap_cnt = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 260
;260:    if (n < 7)
ADDRFP4 4
INDIRU4
CNSTU4 7
GEU4 $155
line 261
;261:    {
line 262
;262:        for (pm = (char*)a + es; pm < (char*)a + n * es; pm += es)
ADDRLP4 32
ADDRFP4 8
INDIRU4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRGP4 $160
JUMPV
LABELV $157
line 263
;263:            for (pl = pm; pl > (char*)a && cmp(pl - es, pl) > 0; pl -= es)
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
ADDRGP4 $164
JUMPV
LABELV $161
line 264
;264:                swap(pl, pl - es);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $165
ADDRLP4 60
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ADDRLP4 60
INDIRI4
ASGNI4
ADDRGP4 $166
JUMPV
LABELV $165
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 64
ADDRFP4 8
INDIRU4
ASGNU4
ADDRLP4 0
INDIRP4
ADDRLP4 64
INDIRU4
SUBP4
ARGP4
ADDRLP4 64
INDIRU4
CVUI4 4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $166
LABELV $162
line 263
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ASGNP4
LABELV $164
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
LEU4 $167
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
GTI4 $161
LABELV $167
LABELV $158
line 262
ADDRLP4 32
ADDRFP4 8
INDIRU4
ADDRLP4 32
INDIRP4
ADDP4
ASGNP4
LABELV $160
ADDRLP4 32
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRU4
ADDRFP4 8
INDIRU4
MULU4
ADDRFP4 0
INDIRP4
ADDP4
CVPU4 4
LTU4 $157
line 265
;265:        return;
ADDRGP4 $146
JUMPV
LABELV $155
line 267
;266:    }
;267:    pm = (char*)a + (n / 2) * es;
ADDRLP4 32
ADDRFP4 4
INDIRU4
CNSTI4 1
RSHU4
ADDRFP4 8
INDIRU4
MULU4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
line 268
;268:    if (n > 7)
ADDRFP4 4
INDIRU4
CNSTU4 7
LEU4 $168
line 269
;269:    {
line 270
;270:        pl = a;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 271
;271:        pn = (char*)a + (n - 1) * es;
ADDRLP4 36
ADDRFP4 4
INDIRU4
CNSTU4 1
SUBU4
ADDRFP4 8
INDIRU4
MULU4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
line 272
;272:        if (n > 40)
ADDRFP4 4
INDIRU4
CNSTU4 40
LEU4 $170
line 273
;273:        {
line 274
;274:            d  = (n / 8) * es;
ADDRLP4 40
ADDRFP4 4
INDIRU4
CNSTI4 3
RSHU4
ADDRFP4 8
INDIRU4
MULU4
CVUI4 4
ASGNI4
line 275
;275:            pl = med3(pl, pl + d, pl + 2 * d, cmp);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 64
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 64
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
ARGP4
ADDRLP4 64
INDIRI4
CNSTI4 1
LSHI4
ADDRLP4 0
INDIRP4
ADDP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 med3
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
ASGNP4
line 276
;276:            pm = med3(pm - d, pm, pm + d, cmp);
ADDRLP4 76
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 32
INDIRP4
ADDRLP4 76
INDIRI4
SUBP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 76
INDIRI4
ADDRLP4 32
INDIRP4
ADDP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 med3
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 80
INDIRP4
ASGNP4
line 277
;277:            pn = med3(pn - 2 * d, pn - d, pn, cmp);
ADDRLP4 88
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 36
INDIRP4
ADDRLP4 88
INDIRI4
CNSTI4 1
LSHI4
SUBP4
ARGP4
ADDRLP4 36
INDIRP4
ADDRLP4 88
INDIRI4
SUBP4
ARGP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 med3
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 92
INDIRP4
ASGNP4
line 278
;278:        }
LABELV $170
line 279
;279:        pm = med3(pl, pm, pn, cmp);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 med3
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 60
INDIRP4
ASGNP4
line 280
;280:    }
LABELV $168
line 281
;281:    swap(a, pm);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $172
ADDRLP4 60
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 32
INDIRP4
ADDRLP4 60
INDIRI4
ASGNI4
ADDRGP4 $173
JUMPV
LABELV $172
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRFP4 8
INDIRU4
CVUI4 4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $173
line 282
;282:    pa = pb = (char*)a + es;
ADDRLP4 60
ADDRFP4 8
INDIRU4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 60
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 60
INDIRP4
ASGNP4
line 284
;283:
;284:    pc = pd = (char*)a + (n - 1) * es;
ADDRLP4 64
ADDRFP4 4
INDIRU4
CNSTU4 1
SUBU4
ADDRFP4 8
INDIRU4
MULU4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRLP4 24
ADDRLP4 64
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 64
INDIRP4
ASGNP4
line 285
;285:    for (;;)
line 286
;286:    {
ADDRGP4 $179
JUMPV
LABELV $178
line 288
;287:        while (pb <= pc && (r = cmp(pb, a)) <= 0)
;288:        {
line 289
;289:            if (r == 0)
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $181
line 290
;290:            {
line 291
;291:                swap_cnt = 1;
ADDRLP4 28
CNSTI4 1
ASGNI4
line 292
;292:                swap(pa, pb);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $183
ADDRLP4 68
ADDRLP4 20
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 68
INDIRI4
ASGNI4
ADDRGP4 $184
JUMPV
LABELV $183
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRU4
CVUI4 4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $184
line 293
;293:                pa += es;
ADDRLP4 20
ADDRFP4 8
INDIRU4
ADDRLP4 20
INDIRP4
ADDP4
ASGNP4
line 294
;294:            }
LABELV $181
line 295
;295:            pb += es;
ADDRLP4 4
ADDRFP4 8
INDIRU4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
line 296
;296:        }
LABELV $179
line 287
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
GTU4 $185
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 72
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
LEI4 $178
LABELV $185
ADDRGP4 $187
JUMPV
LABELV $186
line 298
;297:        while (pb <= pc && (r = cmp(pc, a)) >= 0)
;298:        {
line 299
;299:            if (r == 0)
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $189
line 300
;300:            {
line 301
;301:                swap_cnt = 1;
ADDRLP4 28
CNSTI4 1
ASGNI4
line 302
;302:                swap(pc, pd);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $191
ADDRLP4 76
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 76
INDIRI4
ASGNI4
ADDRGP4 $192
JUMPV
LABELV $191
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRFP4 8
INDIRU4
CVUI4 4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $192
line 303
;303:                pd -= es;
ADDRLP4 24
ADDRLP4 24
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ASGNP4
line 304
;304:            }
LABELV $189
line 305
;305:            pc -= es;
ADDRLP4 8
ADDRLP4 8
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ASGNP4
line 306
;306:        }
LABELV $187
line 297
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
GTU4 $193
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 80
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
GEI4 $186
LABELV $193
line 307
;307:        if (pb > pc)
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
LEU4 $194
line 308
;308:            break;
ADDRGP4 $176
JUMPV
LABELV $194
line 309
;309:        swap(pb, pc);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $196
ADDRLP4 84
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 84
INDIRI4
ASGNI4
ADDRGP4 $197
JUMPV
LABELV $196
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 8
INDIRU4
CVUI4 4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $197
line 310
;310:        swap_cnt = 1;
ADDRLP4 28
CNSTI4 1
ASGNI4
line 311
;311:        pb += es;
ADDRLP4 4
ADDRFP4 8
INDIRU4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
line 312
;312:        pc -= es;
ADDRLP4 8
ADDRLP4 8
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ASGNP4
line 313
;313:    }
line 285
ADDRGP4 $179
JUMPV
LABELV $176
line 314
;314:    if (swap_cnt == 0)
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $198
line 315
;315:    { /* Switch to insertion sort */
line 316
;316:        for (pm = (char*)a + es; pm < (char*)a + n * es; pm += es)
ADDRLP4 32
ADDRFP4 8
INDIRU4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
ADDRGP4 $203
JUMPV
LABELV $200
line 317
;317:            for (pl = pm; pl > (char*)a && cmp(pl - es, pl) > 0; pl -= es)
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
ADDRGP4 $207
JUMPV
LABELV $204
line 318
;318:                swap(pl, pl - es);
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $208
ADDRLP4 68
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ADDRLP4 68
INDIRI4
ASGNI4
ADDRGP4 $209
JUMPV
LABELV $208
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRFP4 8
INDIRU4
ASGNU4
ADDRLP4 0
INDIRP4
ADDRLP4 72
INDIRU4
SUBP4
ARGP4
ADDRLP4 72
INDIRU4
CVUI4 4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $209
LABELV $205
line 317
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ASGNP4
LABELV $207
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
LEU4 $210
ADDRLP4 0
INDIRP4
ADDRFP4 8
INDIRU4
SUBP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 80
ADDRFP4 12
INDIRP4
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
GTI4 $204
LABELV $210
LABELV $201
line 316
ADDRLP4 32
ADDRFP4 8
INDIRU4
ADDRLP4 32
INDIRP4
ADDP4
ASGNP4
LABELV $203
ADDRLP4 32
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRU4
ADDRFP4 8
INDIRU4
MULU4
ADDRFP4 0
INDIRP4
ADDP4
CVPU4 4
LTU4 $200
line 319
;319:        return;
ADDRGP4 $146
JUMPV
LABELV $198
line 322
;320:    }
;321:
;322:    pn = (char*)a + n * es;
ADDRLP4 36
ADDRFP4 4
INDIRU4
ADDRFP4 8
INDIRU4
MULU4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
line 323
;323:    r  = min(pa - (char*)a, pb - pa);
ADDRLP4 72
ADDRLP4 20
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 72
INDIRU4
ADDRFP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 72
INDIRU4
SUBU4
CVUI4 4
GEI4 $212
ADDRLP4 68
ADDRLP4 20
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
ADDRGP4 $213
JUMPV
LABELV $212
ADDRLP4 68
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 20
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
LABELV $213
ADDRLP4 12
ADDRLP4 68
INDIRI4
ASGNI4
line 324
;324:    vecswap(a, pb - r, r);
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $214
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ADDRLP4 12
INDIRI4
SUBP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $214
line 325
;325:    r = min(pd - pc, pn - pd - es);
ADDRLP4 84
ADDRLP4 24
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 84
INDIRU4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
CVIU4 4
ADDRLP4 36
INDIRP4
CVPU4 4
ADDRLP4 84
INDIRU4
SUBU4
CVUI4 4
CVIU4 4
ADDRFP4 8
INDIRU4
SUBU4
GEU4 $217
ADDRLP4 80
ADDRLP4 24
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
CVIU4 4
ASGNU4
ADDRGP4 $218
JUMPV
LABELV $217
ADDRLP4 80
ADDRLP4 36
INDIRP4
CVPU4 4
ADDRLP4 24
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
CVIU4 4
ADDRFP4 8
INDIRU4
SUBU4
ASGNU4
LABELV $218
ADDRLP4 12
ADDRLP4 80
INDIRU4
CVUI4 4
ASGNI4
line 326
;326:    vecswap(pb, pn - r, r);
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $219
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
ADDRLP4 12
INDIRI4
SUBP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 swapfunc
CALLV
pop
LABELV $219
line 327
;327:    if ((r = pb - pa) > es)
ADDRLP4 92
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 20
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
ADDRLP4 12
ADDRLP4 92
INDIRI4
ASGNI4
ADDRLP4 92
INDIRI4
CVIU4 4
ADDRFP4 8
INDIRU4
LEU4 $221
line 328
;328:        qsort(a, r / es, es, cmp);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 96
ADDRFP4 8
INDIRU4
ASGNU4
ADDRLP4 12
INDIRI4
CVIU4 4
ADDRLP4 96
INDIRU4
DIVU4
ARGU4
ADDRLP4 96
INDIRU4
ARGU4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 qsort
CALLV
pop
LABELV $221
line 329
;329:    if ((r = pd - pc) > es)
ADDRLP4 100
ADDRLP4 24
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ASGNI4
ADDRLP4 12
ADDRLP4 100
INDIRI4
ASGNI4
ADDRLP4 100
INDIRI4
CVIU4 4
ADDRFP4 8
INDIRU4
LEU4 $223
line 330
;330:    {
line 332
;331:        /* Iterate rather than recurse to save stack space */
;332:        a = pn - r;
ADDRFP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 12
INDIRI4
SUBP4
ASGNP4
line 333
;333:        n = r / es;
ADDRFP4 4
ADDRLP4 12
INDIRI4
CVIU4 4
ADDRFP4 8
INDIRU4
DIVU4
ASGNU4
line 334
;334:        goto loop;
ADDRGP4 $147
JUMPV
LABELV $223
line 337
;335:    }
;336:    /*      qsort(pn - r, r / es, es, cmp);*/
;337:}
LABELV $146
endproc qsort 104 16
data
align 4
LABELV randSeed
byte 4 0
export srand
code
proc srand 0 0
line 343
;338:
;339:
;340:static int randSeed = 0;
;341:
;342:void srand(unsigned seed)
;343:{
line 344
;344:    randSeed = seed;
ADDRGP4 randSeed
ADDRFP4 0
INDIRU4
CVUI4 4
ASGNI4
line 345
;345:}
LABELV $225
endproc srand 0 0
export rand
proc rand 4 0
line 348
;346:
;347:int rand(void)
;348:{
line 349
;349:    randSeed = (69069 * randSeed + 1);
ADDRLP4 0
ADDRGP4 randSeed
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 69069
ADDRLP4 0
INDIRP4
INDIRI4
MULI4
CNSTI4 1
ADDI4
ASGNI4
line 350
;350:    return randSeed & 0x7fff;
ADDRGP4 randSeed
INDIRI4
CNSTI4 32767
BANDI4
RETI4
LABELV $226
endproc rand 4 0
export atof
proc atof 32 0
line 354
;351:}
;352:
;353:double atof(const char* string)
;354:{
ADDRGP4 $229
JUMPV
LABELV $228
line 361
;355:    float sign;
;356:    float value;
;357:    int   c;
;358:
;359:    // skip whitespace
;360:    while (*string <= ' ')
;361:    {
line 362
;362:        if (!*string)
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $231
line 363
;363:        {
line 364
;364:            return 0;
CNSTF4 0
RETF4
ADDRGP4 $227
JUMPV
LABELV $231
line 366
;365:        }
;366:        string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 367
;367:    }
LABELV $229
line 360
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $228
line 370
;368:
;369:    // check sign
;370:    switch (*string)
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 43
EQI4 $236
ADDRLP4 12
INDIRI4
CNSTI4 45
EQI4 $237
ADDRGP4 $233
JUMPV
line 371
;371:    {
LABELV $236
line 373
;372:    case '+':
;373:        string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 374
;374:        sign = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 375
;375:        break;
ADDRGP4 $234
JUMPV
LABELV $237
line 377
;376:    case '-':
;377:        string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 378
;378:        sign = -1;
ADDRLP4 8
CNSTF4 3212836864
ASGNF4
line 379
;379:        break;
ADDRGP4 $234
JUMPV
LABELV $233
line 381
;380:    default:
;381:        sign = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 382
;382:        break;
LABELV $234
line 386
;383:    }
;384:
;385:    // read digits
;386:    value = 0;
ADDRLP4 4
CNSTF4 0
ASGNF4
line 387
;387:    c     = string[0];
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 388
;388:    if (c != '.')
ADDRLP4 0
INDIRI4
CNSTI4 46
EQI4 $238
line 389
;389:    {
LABELV $240
line 391
;390:        do
;391:        {
line 392
;392:            c = *string++;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 393
;393:            if (c < '0' || c > '9')
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $245
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $243
LABELV $245
line 394
;394:            {
line 395
;395:                break;
ADDRGP4 $239
JUMPV
LABELV $243
line 397
;396:            }
;397:            c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 398
;398:            value = value * 10 + c;
ADDRLP4 4
CNSTF4 1092616192
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 399
;399:        } while (1);
LABELV $241
ADDRGP4 $240
JUMPV
line 400
;400:    }
ADDRGP4 $239
JUMPV
LABELV $238
line 402
;401:    else
;402:    {
line 403
;403:        string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 404
;404:    }
LABELV $239
line 407
;405:
;406:    // check for decimal point
;407:    if (c == '.')
ADDRLP4 0
INDIRI4
CNSTI4 46
NEI4 $246
line 408
;408:    {
line 411
;409:        double fraction;
;410:
;411:        fraction = 0.1;
ADDRLP4 20
CNSTF4 1036831949
ASGNF4
LABELV $248
line 413
;412:        do
;413:        {
line 414
;414:            c = *string++;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 415
;415:            if (c < '0' || c > '9')
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $253
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $251
LABELV $253
line 416
;416:            {
line 417
;417:                break;
ADDRGP4 $250
JUMPV
LABELV $251
line 419
;418:            }
;419:            c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 420
;420:            value += c * fraction;
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 421
;421:            fraction *= 0.1;
ADDRLP4 20
CNSTF4 1036831949
ADDRLP4 20
INDIRF4
MULF4
ASGNF4
line 422
;422:        } while (1);
LABELV $249
ADDRGP4 $248
JUMPV
LABELV $250
line 423
;423:    }
LABELV $246
line 427
;424:
;425:    // not handling 10e10 notation...
;426:
;427:    return value * sign;
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
RETF4
LABELV $227
endproc atof 32 0
export _atof
proc _atof 36 0
line 431
;428:}
;429:
;430:double _atof(const char** stringPtr)
;431:{
line 435
;432:    const char* string;
;433:    float       sign;
;434:    float       value;
;435:    int         c = '0'; // bk001211 - uninitialized use possible
ADDRLP4 0
CNSTI4 48
ASGNI4
line 437
;436:
;437:    string = *stringPtr;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRGP4 $256
JUMPV
LABELV $255
line 441
;438:
;439:    // skip whitespace
;440:    while (*string <= ' ')
;441:    {
line 442
;442:        if (!*string)
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $258
line 443
;443:        {
line 444
;444:            *stringPtr = string;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 445
;445:            return 0;
CNSTF4 0
RETF4
ADDRGP4 $254
JUMPV
LABELV $258
line 447
;446:        }
;447:        string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 448
;448:    }
LABELV $256
line 440
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $255
line 451
;449:
;450:    // check sign
;451:    switch (*string)
ADDRLP4 16
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 43
EQI4 $263
ADDRLP4 16
INDIRI4
CNSTI4 45
EQI4 $264
ADDRGP4 $260
JUMPV
line 452
;452:    {
LABELV $263
line 454
;453:    case '+':
;454:        string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 455
;455:        sign = 1;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 456
;456:        break;
ADDRGP4 $261
JUMPV
LABELV $264
line 458
;457:    case '-':
;458:        string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 459
;459:        sign = -1;
ADDRLP4 12
CNSTF4 3212836864
ASGNF4
line 460
;460:        break;
ADDRGP4 $261
JUMPV
LABELV $260
line 462
;461:    default:
;462:        sign = 1;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 463
;463:        break;
LABELV $261
line 467
;464:    }
;465:
;466:    // read digits
;467:    value = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 468
;468:    if (string[0] != '.')
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 46
EQI4 $265
line 469
;469:    {
LABELV $267
line 471
;470:        do
;471:        {
line 472
;472:            c = *string++;
ADDRLP4 24
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 473
;473:            if (c < '0' || c > '9')
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $272
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $270
LABELV $272
line 474
;474:            {
line 475
;475:                break;
ADDRGP4 $269
JUMPV
LABELV $270
line 477
;476:            }
;477:            c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 478
;478:            value = value * 10 + c;
ADDRLP4 8
CNSTF4 1092616192
ADDRLP4 8
INDIRF4
MULF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 479
;479:        } while (1);
LABELV $268
ADDRGP4 $267
JUMPV
LABELV $269
line 480
;480:    }
LABELV $265
line 483
;481:
;482:    // check for decimal point
;483:    if (c == '.')
ADDRLP4 0
INDIRI4
CNSTI4 46
NEI4 $273
line 484
;484:    {
line 487
;485:        double fraction;
;486:
;487:        fraction = 0.1;
ADDRLP4 24
CNSTF4 1036831949
ASGNF4
LABELV $275
line 489
;488:        do
;489:        {
line 490
;490:            c = *string++;
ADDRLP4 28
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 491
;491:            if (c < '0' || c > '9')
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $280
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $278
LABELV $280
line 492
;492:            {
line 493
;493:                break;
ADDRGP4 $277
JUMPV
LABELV $278
line 495
;494:            }
;495:            c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 496
;496:            value += c * fraction;
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 497
;497:            fraction *= 0.1;
ADDRLP4 24
CNSTF4 1036831949
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
line 498
;498:        } while (1);
LABELV $276
ADDRGP4 $275
JUMPV
LABELV $277
line 499
;499:    }
LABELV $273
line 502
;500:
;501:    // not handling 10e10 notation...
;502:    *stringPtr = string;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 504
;503:
;504:    return value * sign;
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
RETF4
LABELV $254
endproc _atof 36 0
export atoi
proc atoi 28 0
line 508
;505:}
;506:
;507:int atoi(const char* string)
;508:{
ADDRGP4 $283
JUMPV
LABELV $282
line 515
;509:    int sign;
;510:    int value;
;511:    int c;
;512:
;513:    // skip whitespace
;514:    while (*string <= ' ')
;515:    {
line 516
;516:        if (!*string)
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $285
line 517
;517:        {
line 518
;518:            return 0;
CNSTI4 0
RETI4
ADDRGP4 $281
JUMPV
LABELV $285
line 520
;519:        }
;520:        string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 521
;521:    }
LABELV $283
line 514
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $282
line 524
;522:
;523:    // check sign
;524:    switch (*string)
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 43
EQI4 $290
ADDRLP4 12
INDIRI4
CNSTI4 45
EQI4 $291
ADDRGP4 $287
JUMPV
line 525
;525:    {
LABELV $290
line 527
;526:    case '+':
;527:        string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 528
;528:        sign = 1;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 529
;529:        break;
ADDRGP4 $288
JUMPV
LABELV $291
line 531
;530:    case '-':
;531:        string++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 532
;532:        sign = -1;
ADDRLP4 8
CNSTI4 -1
ASGNI4
line 533
;533:        break;
ADDRGP4 $288
JUMPV
LABELV $287
line 535
;534:    default:
;535:        sign = 1;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 536
;536:        break;
LABELV $288
line 540
;537:    }
;538:
;539:    // read digits
;540:    value = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $292
line 542
;541:    do
;542:    {
line 543
;543:        c = *string++;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 20
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 544
;544:        if (c < '0' || c > '9')
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $297
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $295
LABELV $297
line 545
;545:        {
line 546
;546:            break;
ADDRGP4 $294
JUMPV
LABELV $295
line 548
;547:        }
;548:        c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 549
;549:        value = value * 10 + c;
ADDRLP4 4
CNSTI4 10
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 550
;550:    } while (1);
LABELV $293
ADDRGP4 $292
JUMPV
LABELV $294
line 554
;551:
;552:    // not handling 10e10 notation...
;553:
;554:    return value * sign;
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
RETI4
LABELV $281
endproc atoi 28 0
export _atoi
proc _atoi 32 0
line 558
;555:}
;556:
;557:int _atoi(const char** stringPtr)
;558:{
line 564
;559:    int         sign;
;560:    int         value;
;561:    int         c;
;562:    const char* string;
;563:
;564:    string = *stringPtr;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRGP4 $300
JUMPV
LABELV $299
line 568
;565:
;566:    // skip whitespace
;567:    while (*string <= ' ')
;568:    {
line 569
;569:        if (!*string)
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $302
line 570
;570:        {
line 571
;571:            return 0;
CNSTI4 0
RETI4
ADDRGP4 $298
JUMPV
LABELV $302
line 573
;572:        }
;573:        string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 574
;574:    }
LABELV $300
line 567
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LEI4 $299
line 577
;575:
;576:    // check sign
;577:    switch (*string)
ADDRLP4 16
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 43
EQI4 $307
ADDRLP4 16
INDIRI4
CNSTI4 45
EQI4 $308
ADDRGP4 $304
JUMPV
line 578
;578:    {
LABELV $307
line 580
;579:    case '+':
;580:        string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 581
;581:        sign = 1;
ADDRLP4 12
CNSTI4 1
ASGNI4
line 582
;582:        break;
ADDRGP4 $305
JUMPV
LABELV $308
line 584
;583:    case '-':
;584:        string++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 585
;585:        sign = -1;
ADDRLP4 12
CNSTI4 -1
ASGNI4
line 586
;586:        break;
ADDRGP4 $305
JUMPV
LABELV $304
line 588
;587:    default:
;588:        sign = 1;
ADDRLP4 12
CNSTI4 1
ASGNI4
line 589
;589:        break;
LABELV $305
line 593
;590:    }
;591:
;592:    // read digits
;593:    value = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $309
line 595
;594:    do
;595:    {
line 596
;596:        c = *string++;
ADDRLP4 24
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 597
;597:        if (c < '0' || c > '9')
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $314
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $312
LABELV $314
line 598
;598:        {
line 599
;599:            break;
ADDRGP4 $311
JUMPV
LABELV $312
line 601
;600:        }
;601:        c -= '0';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 48
SUBI4
ASGNI4
line 602
;602:        value = value * 10 + c;
ADDRLP4 8
CNSTI4 10
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 603
;603:    } while (1);
LABELV $310
ADDRGP4 $309
JUMPV
LABELV $311
line 607
;604:
;605:    // not handling 10e10 notation...
;606:
;607:    *stringPtr = string;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 609
;608:
;609:    return value * sign;
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
MULI4
RETI4
LABELV $298
endproc _atoi 32 0
export abs
proc abs 4 0
line 613
;610:}
;611:
;612:int abs(int n)
;613:{
line 614
;614:    return n < 0 ? -n : n;
ADDRFP4 0
INDIRI4
CNSTI4 0
GEI4 $317
ADDRLP4 0
ADDRFP4 0
INDIRI4
NEGI4
ASGNI4
ADDRGP4 $318
JUMPV
LABELV $317
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
LABELV $318
ADDRLP4 0
INDIRI4
RETI4
LABELV $315
endproc abs 4 0
export fabs
proc fabs 4 0
line 618
;615:}
;616:
;617:double fabs(double x)
;618:{
line 619
;619:    return x < 0 ? -x : x;
ADDRFP4 0
INDIRF4
CNSTF4 0
GEF4 $321
ADDRLP4 0
ADDRFP4 0
INDIRF4
NEGF4
ASGNF4
ADDRGP4 $322
JUMPV
LABELV $321
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
LABELV $322
ADDRLP4 0
INDIRF4
RETF4
LABELV $319
endproc fabs 4 0
export AddInt
proc AddInt 56 0
line 637
;620:}
;621:
;622:#define ALT 0x00000001       /* alternate form */
;623:#define HEXPREFIX 0x00000002 /* add 0x or 0X prefix */
;624:#define LADJUST 0x00000004   /* left adjustment */
;625:#define LONGDBL 0x00000008   /* long double */
;626:#define LONGINT 0x00000010   /* long integer */
;627:#define QUADINT 0x00000020   /* quad integer */
;628:#define SHORTINT 0x00000040  /* short integer */
;629:#define ZEROPAD 0x00000080   /* zero (as opposed to blank) pad */
;630:#define FPT 0x00000100       /* floating point number */
;631:
;632:#define to_digit(c) ((c) - '0')
;633:#define is_digit(c) ((unsigned)to_digit(c) <= 9)
;634:#define to_char(n) ((n) + '0')
;635:
;636:void AddInt(char** buf_p, int val, int width, int flags)
;637:{
line 643
;638:    char  text[32];
;639:    int   digits;
;640:    int   signedVal;
;641:    char* buf;
;642:
;643:    digits    = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 644
;644:    signedVal = val;
ADDRLP4 40
ADDRFP4 4
INDIRI4
ASGNI4
line 645
;645:    if (val < 0)
ADDRFP4 4
INDIRI4
CNSTI4 0
GEI4 $324
line 646
;646:    {
line 647
;647:        val = -val;
ADDRFP4 4
ADDRFP4 4
INDIRI4
NEGI4
ASGNI4
line 648
;648:    }
LABELV $324
LABELV $326
line 650
;649:    do
;650:    {
line 651
;651:        text[digits++] = '0' + val % 10;
ADDRLP4 44
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
ADDRLP4 8
ADDP4
ADDRFP4 4
INDIRI4
CNSTI4 10
MODI4
CNSTI4 48
ADDI4
CVII1 4
ASGNI1
line 652
;652:        val /= 10;
ADDRFP4 4
ADDRFP4 4
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 653
;653:    } while (val);
LABELV $327
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $326
line 655
;654:
;655:    if (signedVal < 0)
ADDRLP4 40
INDIRI4
CNSTI4 0
GEI4 $329
line 656
;656:    {
line 657
;657:        text[digits++] = '-';
ADDRLP4 44
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
ADDRLP4 8
ADDP4
CNSTI1 45
ASGNI1
line 658
;658:    }
LABELV $329
line 660
;659:
;660:    buf = *buf_p;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 662
;661:
;662:    if (!(flags & LADJUST))
ADDRFP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
NEI4 $340
line 663
;663:    {
ADDRGP4 $334
JUMPV
LABELV $333
line 665
;664:        while (digits < width)
;665:        {
line 666
;666:            *buf++ = (flags & ZEROPAD) ? '0' : ' ';
ADDRLP4 48
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 48
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRFP4 12
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $337
ADDRLP4 44
CNSTI4 48
ASGNI4
ADDRGP4 $338
JUMPV
LABELV $337
ADDRLP4 44
CNSTI4 32
ASGNI4
LABELV $338
ADDRLP4 48
INDIRP4
ADDRLP4 44
INDIRI4
CVII1 4
ASGNI1
line 667
;667:            width--;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 668
;668:        }
LABELV $334
line 664
ADDRLP4 0
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $333
line 669
;669:    }
ADDRGP4 $340
JUMPV
LABELV $339
line 672
;670:
;671:    while (digits--)
;672:    {
line 673
;673:        *buf++ = text[digits];
ADDRLP4 44
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 44
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
line 674
;674:        width--;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 675
;675:    }
LABELV $340
line 671
ADDRLP4 44
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $339
line 677
;676:
;677:    if (flags & LADJUST)
ADDRFP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $342
line 678
;678:    {
ADDRGP4 $345
JUMPV
LABELV $344
line 680
;679:        while (width--)
;680:        {
line 681
;681:            *buf++ = (flags & ZEROPAD) ? '0' : ' ';
ADDRLP4 52
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 52
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRFP4 12
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $348
ADDRLP4 48
CNSTI4 48
ASGNI4
ADDRGP4 $349
JUMPV
LABELV $348
ADDRLP4 48
CNSTI4 32
ASGNI4
LABELV $349
ADDRLP4 52
INDIRP4
ADDRLP4 48
INDIRI4
CVII1 4
ASGNI1
line 682
;682:        }
LABELV $345
line 679
ADDRLP4 48
ADDRFP4 8
INDIRI4
ASGNI4
ADDRFP4 8
ADDRLP4 48
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $344
line 683
;683:    }
LABELV $342
line 685
;684:
;685:    *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 686
;686:}
LABELV $323
endproc AddInt 56 0
export AddFloat
proc AddFloat 60 0
line 689
;687:
;688:void AddFloat(char** buf_p, float fval, int width, int prec)
;689:{
line 697
;690:    char  text[32];
;691:    int   digits;
;692:    float signedVal;
;693:    char* buf;
;694:    int   val;
;695:
;696:    // get the sign
;697:    signedVal = fval;
ADDRLP4 44
ADDRFP4 4
INDIRF4
ASGNF4
line 698
;698:    if (fval < 0)
ADDRFP4 4
INDIRF4
CNSTF4 0
GEF4 $351
line 699
;699:    {
line 700
;700:        fval = -fval;
ADDRFP4 4
ADDRFP4 4
INDIRF4
NEGF4
ASGNF4
line 701
;701:    }
LABELV $351
line 704
;702:
;703:    // write the float number
;704:    digits = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 705
;705:    val    = (int)fval;
ADDRLP4 4
ADDRFP4 4
INDIRF4
CVFI4 4
ASGNI4
LABELV $353
line 707
;706:    do
;707:    {
line 708
;708:        text[digits++] = '0' + val % 10;
ADDRLP4 48
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MODI4
CNSTI4 48
ADDI4
CVII1 4
ASGNI1
line 709
;709:        val /= 10;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 710
;710:    } while (val);
LABELV $354
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $353
line 712
;711:
;712:    if (signedVal < 0)
ADDRLP4 44
INDIRF4
CNSTF4 0
GEF4 $356
line 713
;713:    {
line 714
;714:        text[digits++] = '-';
ADDRLP4 48
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 8
ADDP4
CNSTI1 45
ASGNI1
line 715
;715:    }
LABELV $356
line 717
;716:
;717:    buf = *buf_p;
ADDRLP4 40
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRGP4 $359
JUMPV
LABELV $358
line 720
;718:
;719:    while (digits < width)
;720:    {
line 721
;721:        *buf++ = ' ';
ADDRLP4 48
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 48
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI1 32
ASGNI1
line 722
;722:        width--;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 723
;723:    }
LABELV $359
line 719
ADDRLP4 0
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $358
ADDRGP4 $362
JUMPV
LABELV $361
line 726
;724:
;725:    while (digits--)
;726:    {
line 727
;727:        *buf++ = text[digits];
ADDRLP4 48
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 48
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
line 728
;728:    }
LABELV $362
line 725
ADDRLP4 48
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $361
line 730
;729:
;730:    *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRP4
ASGNP4
line 732
;731:
;732:    if (prec < 0)
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $364
line 733
;733:        prec = 6;
ADDRFP4 12
CNSTI4 6
ASGNI4
LABELV $364
line 735
;734:    // write the fraction
;735:    digits = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $367
JUMPV
LABELV $366
line 737
;736:    while (digits < prec)
;737:    {
line 738
;738:        fval -= (int)fval;
ADDRLP4 52
ADDRFP4 4
INDIRF4
ASGNF4
ADDRFP4 4
ADDRLP4 52
INDIRF4
ADDRLP4 52
INDIRF4
CVFI4 4
CVIF4 4
SUBF4
ASGNF4
line 739
;739:        fval *= 10.0;
ADDRFP4 4
CNSTF4 1092616192
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 740
;740:        val            = (int)fval;
ADDRLP4 4
ADDRFP4 4
INDIRF4
CVFI4 4
ASGNI4
line 741
;741:        text[digits++] = '0' + val % 10;
ADDRLP4 56
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MODI4
CNSTI4 48
ADDI4
CVII1 4
ASGNI1
line 742
;742:    }
LABELV $367
line 736
ADDRLP4 0
INDIRI4
ADDRFP4 12
INDIRI4
LTI4 $366
line 744
;743:
;744:    if (digits > 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $369
line 745
;745:    {
line 746
;746:        buf    = *buf_p;
ADDRLP4 40
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 747
;747:        *buf++ = '.';
ADDRLP4 52
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 52
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI1 46
ASGNI1
line 748
;748:        for (prec = 0; prec < digits; prec++)
ADDRFP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $374
JUMPV
LABELV $371
line 749
;749:        {
line 750
;750:            *buf++ = text[prec];
ADDRLP4 56
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 56
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRFP4 12
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
line 751
;751:        }
LABELV $372
line 748
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $374
ADDRFP4 12
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $371
line 752
;752:        *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRP4
ASGNP4
line 753
;753:    }
LABELV $369
line 754
;754:}
LABELV $350
endproc AddFloat 60 0
export AddString
proc AddString 20 4
line 757
;755:
;756:void AddString(char** buf_p, char* string, int width, int prec)
;757:{
line 761
;758:    int   size;
;759:    char* buf;
;760:
;761:    buf = *buf_p;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 763
;762:
;763:    if (string == NULL)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $376
line 764
;764:    {
line 765
;765:        string = "(null)";
ADDRFP4 4
ADDRGP4 $378
ASGNP4
line 766
;766:        prec   = -1;
ADDRFP4 12
CNSTI4 -1
ASGNI4
line 767
;767:    }
LABELV $376
line 769
;768:
;769:    if (prec >= 0)
ADDRFP4 12
INDIRI4
CNSTI4 0
LTI4 $379
line 770
;770:    {
line 771
;771:        for (size = 0; size < prec; size++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $384
JUMPV
LABELV $381
line 772
;772:        {
line 773
;773:            if (string[size] == '\0')
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $385
line 774
;774:            {
line 775
;775:                break;
ADDRGP4 $380
JUMPV
LABELV $385
line 777
;776:            }
;777:        }
LABELV $382
line 771
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $384
ADDRLP4 0
INDIRI4
ADDRFP4 12
INDIRI4
LTI4 $381
line 778
;778:    }
ADDRGP4 $380
JUMPV
LABELV $379
line 780
;779:    else
;780:    {
line 781
;781:        size = strlen(string);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 strlen
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 8
INDIRU4
CVUI4 4
ASGNI4
line 782
;782:    }
LABELV $380
line 784
;783:
;784:    width -= size;
ADDRFP4 8
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ASGNI4
ADDRGP4 $388
JUMPV
LABELV $387
line 787
;785:
;786:    while (size--)
;787:    {
line 788
;788:        *buf++ = *string++;
ADDRLP4 8
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 12
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI1
ASGNI1
line 789
;789:    }
LABELV $388
line 786
ADDRLP4 8
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $387
ADDRGP4 $391
JUMPV
LABELV $390
line 792
;790:
;791:    while (width-- > 0)
;792:    {
line 793
;793:        *buf++ = ' ';
ADDRLP4 12
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI1 32
ASGNI1
line 794
;794:    }
LABELV $391
line 791
ADDRLP4 12
ADDRFP4 8
INDIRI4
ASGNI4
ADDRFP4 8
ADDRLP4 12
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
GTI4 $390
line 796
;795:
;796:    *buf_p = buf;
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 797
;797:}
LABELV $375
endproc AddString 20 4
export vsprintf
proc vsprintf 72 16
line 800
;798:
;799:int vsprintf(char* buffer, const char* fmt, va_list argptr)
;800:{
line 810
;801:    int*  arg;
;802:    char* buf_p;
;803:    char  ch;
;804:    int   flags;
;805:    int   width;
;806:    int   prec;
;807:    int   n;
;808:    char  sign;
;809:
;810:    buf_p = buffer;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
line 811
;811:    arg   = (int*)argptr;
ADDRLP4 24
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 $395
JUMPV
LABELV $394
line 814
;812:
;813:    while (1)
;814:    {
line 816
;815:        // run through the format string until we hit a '%' or '\0'
;816:        for (ch = *fmt; (ch = *fmt) != '\0' && ch != '%'; fmt++)
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRI1
ASGNI1
ADDRGP4 $400
JUMPV
LABELV $397
line 817
;817:        {
line 818
;818:            *buf_p++ = ch;
ADDRLP4 32
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 0
INDIRI1
ASGNI1
line 819
;819:        }
LABELV $398
line 816
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $400
ADDRLP4 29
ADDRFP4 4
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 0
ADDRLP4 29
INDIRI1
ASGNI1
ADDRLP4 29
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $401
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 37
NEI4 $397
LABELV $401
line 820
;820:        if (ch == '\0')
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $402
line 821
;821:        {
line 822
;822:            goto done;
ADDRGP4 $404
JUMPV
LABELV $402
line 826
;823:        }
;824:
;825:        // skip over the '%'
;826:        fmt++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 829
;827:
;828:        // reset formatting state
;829:        flags = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 830
;830:        width = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 831
;831:        prec  = -1;
ADDRLP4 20
CNSTI4 -1
ASGNI4
line 832
;832:        sign  = '\0';
ADDRLP4 28
CNSTI1 0
ASGNI1
LABELV $405
line 835
;833:
;834:    rflag:
;835:        ch = *fmt++;
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
INDIRI1
ASGNI1
LABELV $406
line 837
;836:    reswitch:
;837:        switch (ch)
ADDRLP4 36
ADDRLP4 0
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 99
LTI4 $428
ADDRLP4 36
INDIRI4
CNSTI4 105
GTI4 $429
ADDRLP4 36
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $430-396
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $430
address $423
address $424
address $407
address $425
address $407
address $407
address $424
code
LABELV $428
ADDRLP4 36
INDIRI4
CNSTI4 37
LTI4 $407
ADDRLP4 36
INDIRI4
CNSTI4 57
GTI4 $407
ADDRLP4 36
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $432-148
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $432
address $427
address $407
address $407
address $407
address $407
address $407
address $407
address $407
address $410
address $411
address $407
address $418
address $419
address $419
address $419
address $419
address $419
address $419
address $419
address $419
address $419
code
LABELV $429
ADDRLP4 36
INDIRI4
CNSTI4 115
EQI4 $426
ADDRGP4 $407
JUMPV
line 838
;838:        {
LABELV $410
line 840
;839:        case '-':
;840:            flags |= LADJUST;
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 4
BORI4
ASGNI4
line 841
;841:            goto rflag;
ADDRGP4 $405
JUMPV
LABELV $411
line 843
;842:        case '.':
;843:            n = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $413
JUMPV
LABELV $412
line 845
;844:            while (is_digit((ch = *fmt++)))
;845:            {
line 846
;846:                n = 10 * n + (ch - '0');
ADDRLP4 8
CNSTI4 10
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ADDI4
ASGNI4
line 847
;847:            }
LABELV $413
line 844
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 48
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 52
ADDRLP4 48
INDIRP4
INDIRI1
ASGNI1
ADDRLP4 0
ADDRLP4 52
INDIRI1
ASGNI1
ADDRLP4 52
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
CVIU4 4
CNSTU4 9
LEU4 $412
line 848
;848:            prec = n < 0 ? -1 : n;
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $416
ADDRLP4 56
CNSTI4 -1
ASGNI4
ADDRGP4 $417
JUMPV
LABELV $416
ADDRLP4 56
ADDRLP4 8
INDIRI4
ASGNI4
LABELV $417
ADDRLP4 20
ADDRLP4 56
INDIRI4
ASGNI4
line 849
;849:            goto reswitch;
ADDRGP4 $406
JUMPV
LABELV $418
line 851
;850:        case '0':
;851:            flags |= ZEROPAD;
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 852
;852:            goto rflag;
ADDRGP4 $405
JUMPV
LABELV $419
line 862
;853:        case '1':
;854:        case '2':
;855:        case '3':
;856:        case '4':
;857:        case '5':
;858:        case '6':
;859:        case '7':
;860:        case '8':
;861:        case '9':
;862:            n = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $420
line 864
;863:            do
;864:            {
line 865
;865:                n  = 10 * n + (ch - '0');
ADDRLP4 8
CNSTI4 10
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ADDI4
ASGNI4
line 866
;866:                ch = *fmt++;
ADDRLP4 60
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 4
ADDRLP4 60
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 60
INDIRP4
INDIRI1
ASGNI1
line 867
;867:            } while (is_digit(ch));
LABELV $421
ADDRLP4 0
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
CVIU4 4
CNSTU4 9
LEU4 $420
line 868
;868:            width = n;
ADDRLP4 12
ADDRLP4 8
INDIRI4
ASGNI4
line 869
;869:            goto reswitch;
ADDRGP4 $406
JUMPV
LABELV $423
line 871
;870:        case 'c':
;871:            *buf_p++ = (char)*arg;
ADDRLP4 60
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 60
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CVII1 4
ASGNI1
line 872
;872:            arg++;
ADDRLP4 24
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 873
;873:            break;
ADDRGP4 $408
JUMPV
LABELV $424
line 876
;874:        case 'd':
;875:        case 'i':
;876:            AddInt(&buf_p, *arg, width, flags);
ADDRLP4 4
ARGP4
ADDRLP4 24
INDIRP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 AddInt
CALLV
pop
line 877
;877:            arg++;
ADDRLP4 24
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 878
;878:            break;
ADDRGP4 $408
JUMPV
LABELV $425
line 880
;879:        case 'f':
;880:            AddFloat(&buf_p, *(double*)arg, width, prec);
ADDRLP4 4
ARGP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 AddFloat
CALLV
pop
line 882
;881:#ifdef __LCC__
;882:            arg += 1; // everything is 32 bit in my compiler
ADDRLP4 24
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 886
;883:#else
;884:            arg += 2;
;885:#endif
;886:            break;
ADDRGP4 $408
JUMPV
LABELV $426
line 888
;887:        case 's':
;888:            AddString(&buf_p, (char*)*arg, width, prec);
ADDRLP4 4
ARGP4
ADDRLP4 24
INDIRP4
INDIRI4
CVIU4 4
CVUP4 4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 AddString
CALLV
pop
line 889
;889:            arg++;
ADDRLP4 24
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 890
;890:            break;
ADDRGP4 $408
JUMPV
LABELV $427
line 892
;891:        case '%':
;892:            *buf_p++ = ch;
ADDRLP4 64
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 64
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 0
INDIRI1
ASGNI1
line 893
;893:            break;
ADDRGP4 $408
JUMPV
LABELV $407
line 895
;894:        default:
;895:            *buf_p++ = (char)*arg;
ADDRLP4 68
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CVII1 4
ASGNI1
line 896
;896:            arg++;
ADDRLP4 24
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 897
;897:            break;
LABELV $408
line 899
;898:        }
;899:    }
LABELV $395
line 813
ADDRGP4 $394
JUMPV
LABELV $404
line 902
;900:
;901:done:
;902:    *buf_p = 0;
ADDRLP4 4
INDIRP4
CNSTI1 0
ASGNI1
line 903
;903:    return buf_p - buffer;
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
RETI4
LABELV $393
endproc vsprintf 72 16
export G_Printf
proc G_Printf 1028 12
line 910
;904:}
;905:
;906:void VM_Com_Printf(const char *string);
;907:void VM_Com_Error(int level, const char *string);
;908:
;909:void GDR_DECL G_Printf(const char *fmt, ...)
;910:{
line 914
;911:    va_list argptr;
;912:    char msg[1024];
;913:
;914:    va_start(argptr, fmt);
ADDRLP4 0
ADDRFP4 0+4
ASGNP4
line 915
;915:    vsprintf(msg, fmt, argptr);
ADDRLP4 4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 vsprintf
CALLI4
pop
line 916
;916:    va_end(argptr);
ADDRLP4 0
CNSTP4 0
ASGNP4
line 918
;917:
;918:    VM_Com_Printf(msg);
ADDRLP4 4
ARGP4
ADDRGP4 VM_Com_Printf
CALLV
pop
line 919
;919:}
LABELV $434
endproc G_Printf 1028 12
export Com_Printf
proc Com_Printf 1028 12
line 922
;920:
;921:void GDR_DECL Com_Printf(const char *fmt, ...)
;922:{
line 926
;923:    va_list argptr;
;924:    char msg[1024];
;925:
;926:    va_start(argptr, fmt);
ADDRLP4 0
ADDRFP4 0+4
ASGNP4
line 927
;927:    vsprintf(msg, fmt, argptr);
ADDRLP4 4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 vsprintf
CALLI4
pop
line 928
;928:    va_end(argptr);
ADDRLP4 0
CNSTP4 0
ASGNP4
line 930
;929:
;930:    VM_Com_Printf(msg);
ADDRLP4 4
ARGP4
ADDRGP4 VM_Com_Printf
CALLV
pop
line 931
;931:}
LABELV $436
endproc Com_Printf 1028 12
export Com_Error
proc Com_Error 1028 12
line 934
;932:
;933:void GDR_DECL Com_Error(int level, const char *fmt, ...)
;934:{
line 938
;935:    va_list argptr;
;936:    char msg[1024];
;937:
;938:    va_start(argptr, fmt);
ADDRLP4 0
ADDRFP4 4+4
ASGNP4
line 939
;939:    vsprintf(msg, fmt, argptr);
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 vsprintf
CALLI4
pop
line 940
;940:    va_end(argptr);
ADDRLP4 0
CNSTP4 0
ASGNP4
line 942
;941:
;942:    VM_Com_Error(level, msg);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 VM_Com_Error
CALLV
pop
line 943
;943:}
LABELV $438
endproc Com_Error 1028 12
import VM_Com_Error
import VM_Com_Printf
import G_LoadBFF
import BFF_FetchTexture
import BFF_FetchLevel
import BFF_FetchScript
import BFF_FreeInfo
import BFF_FetchInfo
import BFF_OpenArchive
import BFF_CloseArchive
import B_GetChunk
import I_GetParm
import CPU_flags
import FS_ReadLine
import FS_ListFiles
import FS_FreeFile
import FS_SetBFFIndex
import FS_GetCurrentChunkList
import FS_Initialized
import FS_FileIsInBFF
import FS_StripExt
import FS_AllowedExtension
import FS_LoadLibrary
import FS_CopyString
import FS_BuildOSPath
import FS_FilenameCompare
import FS_FileTell
import FS_FileLength
import FS_FileSeek
import FS_FileExists
import FS_LastBFFIndex
import FS_LoadStack
import FS_Rename
import FS_FOpenFileRead
import FS_FOpenRW
import FS_FOpenWrite
import FS_FOpenRead
import FS_FOpenFileWithMode
import FS_FOpenWithMode
import FS_FileToFileno
import FS_Printf
import FS_GetGamePath
import FS_GetHomePath
import FS_GetBasePath
import FS_GetBaseGameDir
import FS_GetCurrentGameDir
import FS_Flush
import FS_ForceFlush
import FS_FClose
import FS_LoadFile
import FS_WriteFile
import FS_Write
import FS_Read
import FS_Remove
import FS_Restart
import FS_Shutdown
import FS_InitFilesystem
import FS_Init
import FS_VM_CloseFiles
import FS_VM_FOpenFileWrite
import FS_VM_FileSeek
import FS_VM_FOpenFileRead
import FS_VM_CreateTmp
import FS_VM_WriteFile
import FS_VM_Write
import FS_VM_Read
import FS_VM_FClose
import FS_VM_FOpenRead
import FS_VM_FOpenWrite
import Con_HistoryGetNext
import Con_HistoryGetPrev
import Con_SaveField
import Con_ResetHistory
import Field_CompleteCommand
import Field_CompleteFilename
import Field_CompleteKeyBind
import Field_CompleteKeyname
import Field_AutoComplete
import Field_Clear
import Cbuf_Init
import Cbuf_Clear
import Cbuf_AddText
import Cbuf_Execute
import Cbuf_InsertText
import Cbuf_ExecuteText
import Cmd_CompleteArgument
import Cmd_CommandCompletion
import va
import Cmd_Clear
import Cmd_Argv
import Cmd_ArgsFrom
import Cmd_SetCommandCompletionFunc
import Cmd_TokenizeStringIgnoreQuotes
import Cmd_TokenizeString
import Cmd_ArgvBuffer
import Cmd_Argc
import Cmd_ExecuteString
import Cmd_ExecuteText
import Cmd_ArgsBuffer
import Cmd_ExecuteCommand
import Cmd_RemoveCommand
import Cmd_AddCommand
import Cmd_Init
import keys
import Key_GetKey
import Key_GetCatcher
import Key_SetCatcher
import Key_ClearStates
import Key_GetBinding
import Key_IsDown
import Key_KeynumToString
import Key_StringToKeynum
import Key_KeynameCompletion
import Com_EventLoop
import Com_KeyEvent
import Com_SendKeyEvents
import Com_QueueEvent
import Com_InitKeyCommands
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import ParseHex
import SkipRestOfLine
import SkipBracedSection
import com_tokentype
import COM_ParseComplex
import Com_BlockChecksum
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_StripExtension
import Com_TruncateLongString
import Com_SortFileList
import Com_Base64Decode
import Com_HasPatterns
import Com_FilterPath
import Com_Filter
import Com_FilterExt
import Com_HexStrToInt
import COM_DefaultExtension
import Com_WriteConfig
import Con_RenderConsole
import Com_GenerateHashValue
import Com_Shutdown
import Com_Init
import crc32_buffer
import I_NomadInit
import ColorIndexFromChar
import g_color_table
import Cvar_SetBooleanValue
import Cvar_SetStringValue
import Cvar_SetFloatValue
import Cvar_SetIntegerValue
import Cvar_SetModified
import Cvar_SetValueSafe
import Cvar_Set
import Cvar_SetSafe
import Cvar_SetDescription
import Cvar_SetGroup
import Cvar_Reset
import Cvar_Command
import Cvar_Get
import Cvar_Update
import Cvar_Flags
import Cvar_CheckRange
import Cvar_VariableString
import Cvar_VariableBoolean
import Cvar_VariableFloat
import Cvar_VariableInteger
import Cvar_VariableStringBufferSafe
import Cvar_VariableStringBuffer
import Cvar_Set2
import Cvar_CommandCompletion
import Cvar_CompleteCvarName
import Cvar_Register
import Cvar_Restart
import N_booltostr
import N_strtobool
import Com_Clamp
import N_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import N_crandom
import N_random
import N_rand
import N_acos
import N_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampCharMove
import ClampChar
import Q_exp2f
import Q_log2f
import Q_rsqrt
import Q_fabs
import locase
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import vec2_origin
import vec3_origin
import mat4_identity
import N_replace
import N_memcmp
import N_memchr
import N_memcpy
import N_memset
import N_strncpyz
import N_strncpy
import N_strcpy
import N_stradd
import N_strneq
import N_streq
import N_strlen
import N_atof
import N_atoi
import N_stristr
import N_strcat
import N_strupr
import N_strlwr
import N_stricmpn
import N_stricmp
import N_strncmp
import N_strcmp
import N_isanumber
import N_isintegral
import N_isalpha
import N_isupper
import N_islower
import N_isprint
import Com_SkipCharset
import Com_SkipTokens
lit
align 1
LABELV $378
byte 1 40
byte 1 110
byte 1 117
byte 1 108
byte 1 108
byte 1 41
byte 1 0
